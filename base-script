#!/bin/bash
#
# ===== HPCINSTALL BUILD SCRIPT
#
#HPCI -n 
#HPCI -v 
#HPCI -l ncarenv
#HPCI -l gnu/6.3.0
#HPCI -l ncarcompilers
#HPCI -a .tar.gz
#HPCI -x export MAKEJOBS=1

#	Maintainer: Brian Vanderwende
#	Revised:   09:00, 17 Dec 2019

# ===== BUILD CONFIGURATION

# Define global software settings
# SWTYPE options: idep, compilers, dcomp, dmpi, blank
SWTYPE=
SWNAME=${HPCI_SW_NAME##*/}

# Module configuration
# MODDESC provides "Help" description of software (use \n\n for paragraphs)
MODDESC=
MODSITE=
MODLIBS=

# Define build itinerary
SWPKGS[0]=${SWNAME}-$HPCI_SW_VERSION

echo -e "\n>>> BEGINNING BUILD [${SWNAME}-${HPCI_SW_VERSION}]\n"
echo "Building with ${LMOD_FAMILY_COMPILER} compilers ..."

if [[ $SWTYPE == dmpi ]]; then
	echo "Using ${LMOD_FAMILY_MPI} MPI library ..."
	export CC=mpicc CXX=mpicxx FC=mpif90
fi

# ===== UNPACK SOURCE FILES AND PREPARE BUILD DIRECTORY


# Make directory for build using PID to avoid clobbers from multiple builds
echo "Preparing source files ..."
BDIR=$PWD/$$; mkdir $BDIR; cd $BDIR

for P in ${!SWPKGS[@]}; do
	PKG=${SWPKGS[$P]}

	# Unpackage source files
	if [[ -e ../${PKG}.tar.gz ]]; then
        tar -xf ../${PKG}.tar.gz
		SRCDIR=$(ls -1c --color=never | head -1)
        [[ $SRCDIR != $PKG ]] && mv $SRCDIR $PKG
	else
		echo -e "\n*** ERROR: source for $PKG does not exist! Exiting ..."
		exit 2
	fi
done

# ===== BUILD AND INSTALL SOFTWARE PACKAGES

function run_cmd {
	echo -e "\n>>> ${1}\n"
	eval $1
	RETVAL=${PIPESTATUS[0]}

	if [[ $RETVAL != 0 ]]; then
		echo -e "\n*** BUILD FAILED: command returned with code ${RETVAL}! Exiting ..."
		exit 1
	fi
}

# Global configure settings
export {CPPFLAGS,CFLAGS,CXXFLAGS,FFLAGS,FCFLAGS,F77FLAGS,F90FLAGS}=-fPIC

echo -e "\n$((++NB))) BUILDING PACKAGE [${SWPKGS[$((NB-1))]}] ...\n"
cd $BDIR/${SWPKGS[$((NB-1))]}

%METHOD%

# ===== CLEAN FILES

echo -e "\n<<< BUILD COMPLETE!\n"
echo "Cleaning source files ..."
cd $BDIR/..; rm -rf $BDIR

# ===== INSTALL THE MODULE

# Set path for lua file
if [[ $SWTYPE == d* ]]; then
	MODPATH=${HPCI_MOD_DIR_CDEP}/$HPCI_SW_NAME
else
	MODPATH=${HPCI_MOD_DIR}/${SWTYPE}/$HPCI_SW_NAME
fi

MODFILE=${MODPATH}/${HPCI_SW_VERSION}.lua
WRAPNAME=${SWNAME//[^A-Za-z0-9]/}
DEPLIST=$(module list 2>&1 | awk -F '[0-9, ][0-9])' '{for(i=2;i<=NF;i++) {print "  "$i}}')

echo "Configuring and installing modulefile ..."
echo "Path: ${MODFILE}"

# Need to ensure group write access so git repository is consistent
umask 0002
mkdir -p $MODPATH

# Write the module file template for this software
cat > $MODFILE << EOF
require("posix")

-- The message printed by the module whatis command
whatis("${SWNAME} v${HPCI_SW_VERSION}")

-- The message printed by the module help command
help([[
$(echo -e ${MODDESC} | fmt -s)

Software website - ${MODSITE}

Built on $(date)
Modules used:
${DEPLIST}
]])

-- Set prerequisites and conflicts
prereq(${HPCI_MOD_PREREQ})
conflict("")

-- Set paths for software binaries, libraries, headers, and manuals
local basepath = "${HPCI_SW_DIR}"
local binpath  = pathJoin(basepath, "/bin")             -- binaries
local libpath  = pathJoin(basepath, "/lib")             -- libraries
local incpath  = pathJoin(basepath, "/include")         -- include files
local pkgpath  = pathJoin(libpath,  "/pkgconfig")       -- pc files
local manpath  = pathJoin(basepath, "/share/man")       -- man pages
local infopath = pathJoin(basepath, "/share/info")      -- info pages
local libs     = "${MODLIBS}"

-- Update path variables in user environment
prepend_path("PATH", binpath)
prepend_path("PKG_CONFIG_PATH", pkgpath)
prepend_path("MANPATH", manpath)
prepend_path("INFOPATH", infopath)

-- Set NCAR-specific environment settings
setenv("NCAR_ROOT_${WRAPNAME^^}", basepath)
setenv("NCAR_INC_${WRAPNAME^^}", incpath)
setenv("NCAR_LDFLAGS_${WRAPNAME^^}", libpath)
setenv("NCAR_LIBS_${WRAPNAME^^}", libs)
EOF
