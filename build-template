#!/bin/bash
#
# ===== HPCINSTALL BUILD SCRIPT
#
#HPCI -n 
#HPCI -v
#HPCI -l ncarenv
#HPCI -l gnu/6.3.0
#HPCI -l ncarcompilers
#HPCI -l mpt/2.15f
#HPCI -a

#	Maintainer: Brian Vanderwende
#	Revised:    15:07, 22 Jan 2018

# ===== BUILD CONFIGURATION

# Module configuration
#   SWTYPE determines module location: idep, compilers, dcomp, dmpi, none
#   SWDESC provides "Help" description of software (use \n\n for paragraphs)
#   SWSITE provides "Help" website for software
#   SWLIBS provides library calls necessary to compile against software
SWTYPE=
SWDESC=
SWSITE=
SWLIBS=

# Autogenerated identifier variables
SWNAME=${HPCI_SW_NAME##*/}
SWVERS=${HPCI_SW_VERSION%%-*}
SWFILE=${SWNAME}-$SWVERS

# Define build itinerary
SWPKGS[0]=${SWFILE}

# Define how each component will be built
#   Options: autotools, make, cmake, perl, pylib, wheel, custom
SWBTOOL[0]=

echo -e "\n>>> BEGINNING BUILD [${SWNAME}-${SWVERS}]\n"
echo "Building with ${LMOD_FAMILY_COMPILER} compilers ..."

# If MPI program, use MPI wrappers for compilers
if [[ $SWTYPE == dmpi ]]; then
	echo "Using ${LMOD_FAMILY_MPI} MPI library ..."

	export CC=mpicc
	export CXX=mpicxx
	export FC=mpif90
fi

# If python is loaded, get version
PYMAJOR=$(module list |& grep -oP ' python/.{0,3}' | cut -d/ -f2)

# ===== BUILD EACH SOFTWARE PACKAGE AS SCHEDULED

function run_cmd {
	echo -e "\n>>> RUNNING COMMAND [${1}]\n"

	eval $1
	RETVAL=${PIPESTATUS[0]}

	if [[ $RETVAL != 0 ]]; then
		echo -e "\n*** ERROR: command exited with code ${RETVAL}! Exiting ..."
		exit 1
	fi
}

# Make directory for build using PID to avoid clobbers from multiple builds
BPID=$$
mkdir -p $BPID

for P in ${!SWPKGS[@]}; do
	PKG=${SWPKGS[$P]}

	echo -e "\n$((P + 1))) BUILDING PACKAGE [${PKG}] ...\n"
	
	# Unpackage source files
	echo "Preparing source files ..."

	if [[ -e ${PKG}.tar.gz ]]; then
		SRCDIR=$(tar -xvf ${PKG}.tar.gz | head -1 | cut -d '/' -f1)
		mv $SRCDIR ${BPID}/$PKG
	else
		echo -e "\n*** ERROR: source for $PKG does not exist! Exiting ..."
		exit 2
	fi

	cd ${BPID}/$PKG

# ===== BUILD AND INSTALL THE SOFTWARE

	# Define settings and prepare source files for package
	case $PKG in
		${SWFILE})
			export {CPPFLAGS,CFLAGS,CXXFLAGS,FFLAGS,FCFLAGS,F77FLAGS,F90FLAGS}=-fPIC
			BUILDOPTS=
			;;
		*)
			;;
	esac

	# Build the package using specified build mechanism
	BTOOL=${SWBTOOL[$P]}
	echo "Using ${BTOOL} ..."

	case $BTOOL in
		autotools)
			mkdir -p m4
			
			if [[ -f autogen.sh ]]; then
				run_cmd ./autogen.sh
			else
				run_cmd "libtoolize -f --copy"
				run_cmd "aclocal -I m4 --install --force"
				run_cmd "autoheader -f"
				run_cmd "autoconf -f"
				run_cmd "automake -af --copy"
			fi
			;&
		make)
			run_cmd "./configure --prefix=$HPCI_SW_DIR $BUILDOPTS"
			run_cmd make
			run_cmd "make install"
			;;
		cmake)
			mkdir build; cd build
			BUILDOPTS="-DCMAKE_INSTALL_PREFIX=$HPCI_SW_DIR $BUILDOPTS"
			
			run_cmd "cmake $BUILDOPTS .."
			run_cmd "cmake --build . --target install"
			;;
		perl)
			run_cmd "perl Makefile.PL PREFIX=$HPCI_SW_DIR $BUILDOPTS"
			run_cmd make
			run_cmd "make install"
			;;
		pylib)
			# Load latest virtual environment and install into VE library
			source ncar_pylib
			run_cmd "pip -v install $BUILDOPTS $PWD"
			deactivate
			;;
		wheel)
			# Build wheel for VEs, then install as prefixed packaged
			run_cmd "python${PYMAJOR} setup.py bdist_wheel --dist-dir=${HPCI_SW_DIR}/wheel $BUILDOPTS"
			cd $HPCI_SW_DIR
			WHEEL=$(ls wheel/ | cut -d '-' -f 1)
			run_cmd "pip${PYMAJOR} --no-cache-dir install --prefix . --no-index -f wheel ${WHEEL}"
			cd - > /dev/null
			;;
		custom)
			;;
	esac

	cd ../../
done

echo -e "\n<<< BUILD COMPLETE!\n"

# ===== CLEAN FILES

echo "Cleaning source files ..."
rm -rf $BPID

# ===== INSTALL THE MODULE

# If module is desired, set path for lua file
if [[ $SWTYPE == none ]]; then
	exit 0
elif [[ $SWTYPE == d* ]]; then
	MODPATH=${HPCI_MOD_DIR_CDEP}/$HPCI_SW_NAME
else
	MODPATH=${HPCI_MOD_DIR}/${SWTYPE}/$HPCI_SW_NAME
fi

MODFILE=${MODPATH}/${HPCI_SW_VERSION}.lua
WRAPNAME=${SWNAME//[^A-Za-z0-9]/}
DEPLIST=$(module list 2>&1 | awk -F '[0-9, ][0-9])' '{for(i=2;i<=NF;i++) {print "  "$i}}')

echo "Configuring and installing modulefile ..."
echo "Path: ${MODFILE}"

# Need to ensure group write access so git repository is consistent
umask 0002
mkdir -p $MODPATH

# Write the module file template for this software
cat > $MODFILE << EOF
require("posix")

-- The message printed by the module whatis command
whatis("${SWNAME} v${HPCI_SW_VERSION}")

-- The message printed by the module help command
help([[
$(echo -e ${SWDESC} | fmt -s)

Software website - ${SWSITE}

Built on $(date)
Modules used:
${DEPLIST}
]])

-- Set prerequisites and conflicts
prereq(${HPCI_MOD_PREREQ})
conflict("")

-- Set paths for software binaries, libraries, headers, and manuals
local basepath = "${HPCI_SW_DIR}"
local binpath  = pathJoin(basepath, "/bin")             -- binaries
local libpath  = pathJoin(basepath, "/lib")             -- libraries
local incpath  = pathJoin(basepath, "/include")         -- include files
local manpath  = pathJoin(basepath, "/share/man")       -- man pages
local pypath   = pathJoin(basepath, "/lib/python${PYMAJOR}/site-packages")
local libs     = "${SWLIBS}"

-- Update the binary and manual paths in user environment
prepend_path("PATH", binpath)
prepend_path("PYTHONPATH", pypath)
prepend_path("MANPATH", manpath)

-- Configure NCAR compiler wrappers to use headers and libraries
setenv("NCAR_INC_${WRAPNAME^^}", incpath)
setenv("NCAR_LDFLAGS_${WRAPNAME^^}", libpath)
setenv("NCAR_LIBS_${WRAPNAME^^}", libs)
EOF
